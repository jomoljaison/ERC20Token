pragma solidity ^0.5.0;


contract owned{
    address public owner;

    constructor() public{
        owner =msg.sender;
    }
        modifier onlyOwner{
            require(msg.sender == owner);
            _;
        }

       
    }




contract TockenERC20 is owned{
string public name;
string public symbol;
uint8 public decimals = 18;
uint256 public totalSupply;

mapping(address => uint256)public balanceOf;
mapping (address => mapping(address =>uint256))public allowance;

event Burn(uint256 _value);
event Mint(uint256 mintedAmount);

constructor (uint256 initialSupply,
            string memory tokenName,
            string memory tokenSymbol)
            public {
totalSupply = initialSupply*10**uint256(decimals);
balanceOf[msg.sender]= totalSupply;
name = tokenName;
symbol = tokenSymbol;
}

function _transfer(address _from,address _to,uint _value)internal{
require(balanceOf[_from]>=_value);
require(balanceOf[_to]+_value >= balanceOf[_to]);

uint previousBalances = balanceOf[_from] + balanceOf[_to];
 balanceOf[_from] -= _value;
balanceOf[_to] += _value;

assert(balanceOf[_from] +balanceOf[_to]== previousBalances);
}



function transfer(address _to,uint256 _value)public returns(bool success){

_transfer(msg.sender,_to,_value);
return true;

}




function transferFrom(address _from,address _to,uint256 _value)public returns (bool success){
require(_value <=allowance[_from][msg.sender]);
allowance[_from][msg.sender] -=_value;
_transfer(_from,_to,_value);
return true;

}

function approve(address _spender,uint256 _value)public returns(bool sucess){
allowance[msg.sender][_spender]= _value;
return true;
}




//burn
function burn (uint256 _value)public returns(bool success){
    require(balanceOf[msg.sender] >= _value);
    balanceOf[msg.sender] -=_value;
    totalSupply -= _value;
    return true;
}

function burnFrom(address _from,uint256 _value)public returns(bool success)
{
    require(balanceOf[_from] >= _value);
    require(_value <= allowance[_from][msg.sender]);

    balanceOf[_from] -= _value;
    totalSupply -= _value;
  emit Burn(_value);
    return true;
}


//mint a token
function mintToken(address target,uint256 mintedAmount) public onlyOwner{
balanceOf[target] +=mintedAmount;
totalSupply +=mintedAmount;
emit Mint(mintedAmount);


    
}


}
